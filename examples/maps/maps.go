// _Мапи_ це [ассоційований тип данних](http://en.wikipedia.org/wiki/Associative_array) в Go
// (який в інших мовах програмування, інколи, називають
// _хеш таблиця_ або _словник_).

package main

import "fmt"

func main() {

    // Щоб cтворити пусту мапу використайте функцію [`make`](./slices):
    // `make(map[key-type]val-type)`.
    m := make(map[string]int)

    // Задати ключ/значення пари можливо за допомогою,
    // вже знайомого, синтаксису <nobr>`name[key] = val`<nobr>.
    m["k1"] = 7
    m["k2"] = 13

    // Друк мапи з `fmt.Println` покаже нам усі існуючі
    // ключ/значення пари в нашій мапі.
    fmt.Println("map:", m)

    // Добути значення для ключа можна за допомогою `name[key]`.
    v1 := m["k1"]
    fmt.Println("v1: ", v1)

    // Функція `len` поверне кількість пар у мапі якщо ви вкажете
    // мапу аргументом до цієї функції.
    fmt.Println("len:", len(m))

    // Функція `delete` видалить ключ/значення пару з мапи.
    delete(m, "k2")
    fmt.Println("map:", m)

    // Необов'язкове друге значення під час запиту значення
    // по ключу з мапи, показує чи присутній данний ключ в мапі.
    // Це корисно використати для розподілу існуючих ключіи та
    // ключіи з нульовим значенням (ниприклад `0` або `""`).
    // В прикладі зправа, нам непотрібно саме значення - отож ми
    // ігноруємо його за допомогою _пустого ідентифікатора_ `_`.
    _, prs := m["k2"]
    fmt.Println("prs:", prs)

    // Дозволяється декларувати та ініалізувати мапу в один
    // рядок використовуючи наступний синтаксис.
    n := map[string]int{"foo": 1, "bar": 2}
    fmt.Println("map:", n)
}
