// _goroutine_ (надалі просто _горутина_) це легковісний [потік виконання](https://uk.wikipedia.org/wiki/%D0%9D%D0%B8%D1%82%D0%BA%D0%B0_(%D1%96%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)).

package main

import (
    "fmt"
    "time"
)

// Функція що ми використаємо за кілька хвилин.
func f(from string) {
    for i := 0; i < 3; i++ {
        fmt.Println(from, ":", i)
    }
}

func main() {

    // Допустимо ми маємо виклик функції вигляду `f(s)`.
    // Ось як би ми викликали цю функцію звичайним
    // (синхронним) чином.
    f("direct")

    // Щоб розпочати виконання функції в горутині, скористайтесь
    // синтаксисом запуску горутини `go f(s)`. Ця горутина буде
    // виконана одночасно з викликом.
    go f("goroutine")

    // Аналогічним чином можна запустит горутину для виклику
    // анонімних функцій.
    go func(msg string) {
        fmt.Println(msg)
    }("going")

    // `time.Sleep(time.Millisecond)` створить паузу у виконанні
    // щоб ми могли дочекатись результату роботи горутин.
    time.Sleep(time.Millisecond)

    // Наші два виклики наразі працюються асинхронно в різних
    // горутинах і результат їх виконання буде показано тут.
    fmt.Println("done")
}
