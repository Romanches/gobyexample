// Go підтримує [_анонімні функції_](https://uk.wikipedia.org/wiki/%D0%90%D0%BD%D0%BE%D0%BD%D1%96%D0%BC%D0%BD%D0%B0_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D1%96%D1%8F),
// що можуть створювати [_замикання_](https://uk.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0%D0%BD%D0%BD%D1%8F_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)).
// Анонімні функції можутьу бути корисні, коли вам
// потрібно декларувати функцію в коді без обов’язкового
// найменування її.
package main

import "fmt"

// Функція  `intSeq` повертає іншу функцію, яку ми
// оголошуємо анонімно в тілі `intSeq`. Функція, що
// повертається, замикається на змінні `i` та формує замикання.
func intSeq() func() int {
    i := 0
    return func() int {
        i++
        return i
    }
}

func main() {

    // Ми викликаємо `intSeq`, присоюємо результат (функцію)
    // до `nextInt`. Ця функціональна змінна замикається над
    // своїм власним  значенням змінної `i`, що буде оновлено
    // щоразу `nextInt` буде викликано.
    nextInt := intSeq()

    // Викличемо `nextInt` кілька раз для демонстрації ефекту замикання.
    fmt.Println(nextInt())
    fmt.Println(nextInt())
    fmt.Println(nextInt())

    // Для демонстрації того що стан є унікальним відносно
    // певної функції, створимо та протестуємо нове замикання.
    newInts := intSeq()
    fmt.Println(newInts())
}
