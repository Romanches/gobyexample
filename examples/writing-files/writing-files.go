// Запис файлів Go слідує схожим шаблонам що і читання, з яким ми вже
// познайомились раніше.

package main

import (
    "bufio"
    "fmt"
    "io/ioutil"
    "os"
)

func check(e error) {
    if e != nil {
        panic(e)
    }
}

func main() {

    // Для початку роботи, ось так можна записати
    // невеличкий шматок рядку (у вигляді байтів) до файлу.
    d1 := []byte("привіт\ngo\n")
    err := ioutil.WriteFile("/tmp/dat1", d1, 0644)
    check(err)

    // Щоб записати в файл багато даних, спочатку нам потрібно його
    // видкрити.
    f, err := os.Create("/tmp/dat2")
    check(err)

    // Це ідиоматично вірно -відкладувати закриття `Close` негайно
    // після відкриття файлу.
    defer f.Close()

    // Ви можемо `Write` байтовий зріз наступним чином.
    d2 := []byte{115, 111, 109, 101, 10}
    n2, err := f.Write(d2)
    check(err)
    fmt.Printf("записано %d байт\n", n2)

    // Вам також доcтупний метод `WriteString`.
    n3, err := f.WriteString("writes\n")
    fmt.Printf("записано %d байт\n", n3)

    // Виконайте `Sync` щоб надіслати буфер до файлу.
    f.Sync()

    // Пакет `bufio` надає можливість буферизованих
    // записів на додачу до буферизованого читання,
    // з яким ми вже зустрічались.
    w := bufio.NewWriter(f)
    n4, err := w.WriteString("buffered\n")
    fmt.Printf("записано %d байт\n", n4)

    // Щоб впевнитись в тому, що всі операції над буферами
    // були відправлені до використаного записника,
    // скористайтесь `Flush`.
    w.Flush()

}
