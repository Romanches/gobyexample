// Go підтримує [_вказівники_](https://uk.wikipedia.org/wiki/%D0%92%D0%BA%D0%B0%D0%B7%D1%96%D0%B2%D0%BD%D0%B8%D0%BA), дозволяючи передавати за посиланням значення та записи в межах программи.

package main

import "fmt"

// Ми спробуємо показати як працюють вказівники на противагу
// значенням на прикладі двох функцій - `zeroval` та `zeroptr`.
// `zeroval` має параметром `int` (ціле число), отож аргумент
// буде передано її за значенням. `zeroval` отримує відмінну
// копію `ival` від змінної з якою функцію визвали.
func zeroval(ival int) {
	ival = 0
}

// `zeroptr` на противагу має параметром `*int`
// (що означає вказівник на ціле число) може приймати значенням
// лише вказівник на цей тип данних. `*iptr` в тілі функції
// розіменовує вказівник з його адреси до значення в цій адресі.
// Присвоєння значення розіменованому вказівнику змінює значення у
// адресі за посиланням.
func zeroptr(iptr *int) {
	*iptr = 0
}

func main() {
	i := 1
	fmt.Println("initial:", i)

	zeroval(i)
	fmt.Println("zeroval:", i)

	// Синтаксиc `&i` дає посилання на адресу `i`,
	// тобто вказівник на `i`.
	fmt.Printf("%p\n", &i)
	zeroptr(&i)

	fmt.Println("zeroptr:", i)

	// Вказівники можна друкувати.
	fmt.Println("pointer:", &i)
}
