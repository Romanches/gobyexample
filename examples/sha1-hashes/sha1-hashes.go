// [хеші _SHA1_](https://uk.wikipedia.org/wiki/SHA-1) часто
// використовуються для визначення коротких ідентифікаторій
// для двійкових або текстових шматків. Наприклад,
// [система контролю версій git ](http://git-scm.com/) широко
// використовує SHA1s для ідентифікації файлів та директорій.
// Ось як можна обчислити SHA1 хеші в Go.

package main

// Go
// Go реалізує кілька функцій хешування у різноманітних пакетах
// `crypto/*`.
import "crypto/sha1"
import "fmt"

func main() {
    s1 := "це рядок sha1"

    // Шаблон для генерації хешу наступний `sha1.New()`,
    // `sha1.Write(bytes)`, і наостанок `sha1.Sum([]byte{})`.
    // Давайте почнемо з генерації нового хешу.
    h := sha1.New()

    // `Write` очікує байти. Якщо у вас є строка `s1`,
    // скористайтесь `[]byte(s)` для конвертації її в байти.
    h.Write([]byte(s1))

    // Результатом цієї операції буде очікуваний хеш у вигляді
    // зрізу байтів, який ми можемо представити у вигляді рядка.
    // Аргумент до `Sum` може бути використано, для того щоб
    // до нього додати отриманий зріз байтів нашого хешу,
    // але насправді така операція зазвичай не потрібна.
    bs1 := h.Sum(nil)

    // SHA1 значення дуже часто подаються у шістнадцятирічному
    // вигляді, напирклад у git commit'ах. Скористайтесь
    // дієсловом форматування `%x` щоб сконвертувати хеш результат
    // в шістнадцятирічний рядок.
    fmt.Println(s1)
    fmt.Printf("%x\n", bs1)

    // А, можна скористатись функцієї обгорткою `sha1.Sum`
    // що відразу надасть вам потрібний хеш у вигляді байтового зрізу.
    s2 := "використай sha1.Sum([]byte)"
    bs2 := sha1.Sum([]byte(s2))
    fmt.Println(s2)
    fmt.Printf("%x\n", bs2)
}
