// В Go, _массив_ це числова послідовність елементів визначеної
// довжини.
package main

import "fmt"

func main() {

    // Ось ми створюємо масив `a` що буде міститити рівно
    // 5 `int`ів. Тип елементів та довжина обидвоє частиною
    // типу масиву. По замовчуванню масив скаладється з нульових
    // значень, що для цілих чисел (`int`ів) означає значення `0`.
    var a [5]int
    fmt.Println("emp:", a)

    // Доступ за індексом дозволяє нам встановлювати значення
    // використовуючи насутпний синтакс `array[index] = value` та
    // повертати значення за допомогою `array[index]`.
    a[4] = 100
    fmt.Println("set:", a)
    fmt.Println("get:", a[4])

    // Вбудована фукнція `len` поверне довжину масиву.
    fmt.Println("len:", len(a))

    // Використовуйте наступний синтаксис для декларації
    // та ініціалізації масиву в одну строку.
    b := [5]int{1, 2, 3, 4, 5}
    fmt.Println("dcl:", b)

    // Масиви самі по собі є одномірними, але ви можете
    // компонувати типи і будувати башато мірні структури
    // данних
    var twoD [2][3]int
    for i := 0; i < 2; i++ {
        for j := 0; j < 3; j++ {
            twoD[i][j] = i + j
        }
    }
    fmt.Println("2d: ", twoD)
}
