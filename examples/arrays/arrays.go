// В Go, _массив_ це послідовність елементів визначеної
// довжини.

package main

import "fmt"

func main() {

    // Тут ми створюємо масив `a` що буде міститити рівно
    // 5 цілих чисел (тип `int`). Тип елементів та довжина є частиною
    // типу масиву. Не ініціалізовані заначення масиву приймають нульове
    // значення базового типу елемента масиву (наприклад 0 для `int`)
    var a [5]int
    fmt.Println("emp:", a)

    // Значення елементів масиву можна встановлювати та повертати за
    // допомогою індексу (порядкового номера елемента в масиві)
    // використовуючи наступний синтаксис
    a[4] = 100
    fmt.Println("set:", a)
    fmt.Println("get:", a[4])

    // Вбудована фукнція `len` повертає довжину масиву.
    fmt.Println("len:", len(a))

    // Для декларацій та ініціалізації масиву в одну строку
    // використовують наступний синтаксис
    b := [5]int{1, 2, 3, 4, 5}
    fmt.Println("dcl:", b)

    // Окрім цього доволяється заміняти довжину масиву знаком elipsis
    // `...` при однорядковій декларації, це призведе до визначення довжини
    // масиву під час компіляції. Окрім того, дозволяється вказувати
    // індекс елемента масиву.
    c := [...]int{1: 1, 2, 4, 8, 16}
    fmt.Println("elipsis:", c)

    // Ви можете компонувати одномірні масиви в багатомірні компонуючи їх,
    // Тут наприклад ми створюємо масив з базовим типом елемента `масив цілих чисел` (`array of int`s) - тобто масив масивів цілих чисел.
    var twoD [2][3]int
    for i := 0; i < 2; i++ {
        for j := 0; j < 3; j++ {
            twoD[i][j] = i + j
        }
    }
    fmt.Println("2d: ", twoD)
}
